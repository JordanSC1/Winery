/*
    MainController.java
    Author: H.D.
    Date: April 11th, 2020

    Description
    the main controller for the winery application, uses instances of the other
    controllers to get and display data
 */
package grahajor;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URL;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuItem;
import models.Wine;

public class MainController implements Initializable {

    @FXML private Button btnSave;
    @FXML private Menu mnuFile;
    @FXML private MenuItem itemExit;
    @FXML private Button btnUpdate;
    @FXML private Button btnDelete;
    
    /*
    * This is something that you may have not seen before. The following two 
    * lines are written manually (not generated by Make Controller). Make sure 
    * that if you remake your controller the @FXML part is placed at the 
    * beggining of each line. The reason for these lines is to import the other
    * two controllers into this controller, so we can access their data including
    * GUI components. There are many other more complicated ways to do this, but 
    * this is by far the simpliest one. The way it is done is by concatinating 
    * the fx:id of the controller with the word Controller.*/
    @FXML private WineController pnlWineController;
    @FXML private WineTableViewController pnlViewController;
    
    /* TODO Part: 1 - to be repeated in WineTableViewController as well
    * Declare as constants the length of the String fields in characters and the 
    * length of the record in bytes
    */
    private final byte STRING_LENGTH = 15; // the number of Chars each string is
    private final byte RECORD_LENGTH = 80; // the total number of bytes/record
    
    // END of Part 1
    
    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        btnUpdate.setDisable(true);
        btnDelete.setDisable(true);
        // show record that is selected in the tables view into the pnlWine view
        pnlViewController.getTableView().setOnMouseClicked(eh -> showWineRecord());
    }
    
    /**
     * This methods gets the wine record from the row selected in the TableView
     * and displays it in the other view in each text field
     */
    private void showWineRecord() {
        btnUpdate.setDisable(false);
        btnDelete.setDisable(false);
        Wine selectedWine = pnlViewController.getSelectedWine();
        pnlWineController.getTxtWineID().setText(String.valueOf(selectedWine.getWineID()));
        pnlWineController.getTxtEstate().setText(selectedWine.getEstate());
        pnlWineController.getTxtGrape().setText(selectedWine.getGrape());
        pnlWineController.getTxtYear().setText(String.valueOf(selectedWine.getYear()));
        pnlWineController.getTxtQuantity().setText(String.valueOf(selectedWine.getQuantity()));
        pnlWineController.getTxtPrice().setText(String.valueOf(selectedWine.getPrice()));
    }

    /**
     * Call writeRecord() method to write a Wine record on to the file
     */
    @FXML
    private void addNew(ActionEvent event) {
        writeRecord();
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);
    }

    /**
     * Method for writing a single wine record in the file. It uses writeWine()
     * to do the actual writing
     */
    private void writeRecord() {
        
        File f = new File("src/res/wines.dat");
        
         /* TODO Part: 6 - Write records on the file
         *  1. Create a RandomAccessFile object 
         *  2. Use the length of the record to create the wineID. You need to do
         *  the calculation so the first record will have wine id = 0, the second
         *  will be 1 and so on. This way the user will not enter a value for the
         *  id avoiding having the same id multiple times.
         *  3. Create a Wine object using the readTextFields() method (Part 2)
         *  4. set the id to the wine returned from the previous step
         *  5. Write the content (properties) of the wine object on the file 
         *  using writeWine (Part 3)
         *  6. Get the ObservableList from pnlViewController and add the wine to it
         *  7. Set the ObservableList onto the TableView of pnlViewController
         *  8. Handle multiple kind of exceptions thrown by above steps with an
         *  appropriate message. Display the error messages using showAlert()
         */
        try {
            // creates the RandomAccessFile object
            RandomAccessFile fileIn = new RandomAccessFile(f, "rw");
            
            // creates the id for the new record based on the number of records
            // in the file
            int id = Integer.parseInt(String.format("%d", fileIn.length()
                    / RECORD_LENGTH));
            
            // creates a Wine object from the text fields
            Wine w = readTextFields();
            
            // sets the pointer to the end of the file in order to not overwrite
            // existing records
            fileIn.seek(fileIn.length());
            
            // sets the wine's id to the generates id
            w.setWineID(id);
            
            //writes the Wine object to the file
            writeWine(fileIn, w);
            
            // updates by adding generated Wine object to the Observable list
            pnlViewController.getObservableList().add(w);
            
            fileIn.close();
            
            // handling exceptions
        } catch (IOException e) {
            showAlert("error","File not found");
        } catch (NumberFormatException e) {
            showAlert("error", "Please enter a valid number!");
        } catch (IllegalArgumentException e) {
            showAlert("error", e.getMessage());
        }
        //END of Part 6
    }
    
    /**
     * This method is used by other method to write a wine record on the file
     */
    private void writeWine(RandomAccessFile raf, Wine w) throws IOException {
        
        /*TODO: Part 5 - Write one record on the file
        * Using the raf and the values from the wine object that are passed as
        * parameters write one record on the file opened/created by raf
        */
        
        // writes the data from the Wine object w passed into the 
        // RandomAccessFile raf passed into the method call
        raf.writeInt(w.getWineID());
        raf.writeChars(prepStringField(w.getEstate(), STRING_LENGTH));
        raf.writeChars(prepStringField(w.getGrape(), STRING_LENGTH));
        raf.writeInt(w.getYear());
        raf.writeInt(w.getQuantity());
        raf.writeDouble(w.getPrice());
        //END of Part 5
    }

    /**
     * Method for reading the data from the text fields and creating a wine
     * object without wineID
     * @return a wine object that contains the values from the text fields as
     * properties.
     */
    private Wine readTextFields() {
        /* TODO Part: 4 - Create a wine object from the text field values
        *  Get values from all of the textfields (excluding txtWineID), create
        *  a wineobject and return it
        */
        
        // gets the text field information from the wine controller and stores
        // each piece of information into an appropriate variable
        String estate = pnlWineController.getTxtEstate().getText();
        String grape = pnlWineController.getTxtGrape().getText();
        int year = Integer.parseInt(pnlWineController.getTxtYear().getText());
        int quantity = Integer.parseInt(
                pnlWineController.getTxtQuantity().getText());
        double price = Double.parseDouble(
                pnlWineController.getTxtPrice().getText());
        if (price <= 0) {
            throw new IllegalArgumentException("Price must be positive");
        }
        
        // generates a new wine object with the retrieved data
        Wine wine = new Wine(estate, grape, year, quantity, price);
        // returns the generated win object
        return wine; // to be replaced with the actual return
        //END of Part 4
    }

    /**
     * Method for displaying different alerts. 
     * @param alertType the type of alert (error, confirmation or information)
     * @param message the massage the alert will display
     * @return the alert object to the caller
     */
    private ButtonType showAlert(String alertType, String message) {
        Alert alert = null;
        Optional<ButtonType> result = null;
        if (alertType.equalsIgnoreCase("error")) {
            alert = new Alert(Alert.AlertType.ERROR);
        } else if (alertType.equalsIgnoreCase("confirmation")) {
            alert = new Alert(Alert.AlertType.CONFIRMATION,
                    "Are you sure you wish to exit?", ButtonType.YES, ButtonType.NO);
        } else {
            alert = new Alert(Alert.AlertType.INFORMATION);
        }
        alert.setTitle(alertType + " Dialog");
        alert.setHeaderText(null);
        alert.setContentText(message);
        result = alert.showAndWait();
        return result.get();
    }

    /**
     * This method is use by writeWine() method to make sure that all strings
     * are of the same size
     * @param value the value of the string to be prepared
     * @param size the number of the characters the string must have
     * @return the string value that was passed as parameter, with added spaced
     * at the end if the string that was passed was less than the size, or a
     * truncated string if it was longer that size
     */
    private String prepStringField(String value, int size) {
        if (value.length() < size) {
            int numSpaces = size - value.length();
            for (int i = 0; i < numSpaces; i++) {
                value += " ";
            }
        } else {
            value = value.substring(0, size);
        }
        return value;
    }

    @FXML
    private void updateRecord(ActionEvent event) {
        
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);
        File f = new File("src/res/wines.dat");
        
        /* TODO Part 7 - Update a record
        *  1. Get the wine id number from the txtWineID field
        *  2. Use readTextFields() method (Part2) to create a Wine object
        *  3. Set the wineID to the wine created and returned by ReadTextFields()
        *  4. Create a RandomAccessFileObject in read and write mode
        *  5. Loop through each record in the file and compare the wineId with 
        *  the the reading of the first part of the record that should be an 
        *  integer. If they are equal, that's the record you need to update
        *  6. Reset the pointer to the beginning of the record (the pointer has
        *  four bytes ahead after reading the integer).
        *  7. Use writeWine() method to overwrite the record on the same raf 
        *  pointer position to update the record. Don't forget to close raf
        *  8. Set the wine object in the ObservableList of pnlViewController
        *  in the same place. HINT: Use id as a position, because wine id is the 
        *  same as the position of the object in the list (that's the way we 
        *  created the wine id
        *  9. Set the observable list to the TableView. Remember in many of the
        *  parts here (6, 7, 8, 9) we are dealing with objects that are in a 
        *  different controller. 
        *  That's why the getters are in that controller for: to allow access to
        *  the components in that controller
        */
        try {
            // gets the id from the text field
            int id = Integer.parseInt(
                    pnlWineController.getTxtWineID().getText());
            // creates a new Wine object from the text fields
            Wine wine = readTextFields();
            // sets wine's id to id
            wine.setWineID(id);
        
            // creates the RandomAccessFile
            RandomAccessFile readF = new RandomAccessFile(f, "rw");
            
            // gets the number of records in the file
            int numRecords = Integer.parseInt(String.format("%d", 
                    readF.length() / RECORD_LENGTH));
            
            // initialize a counter for a while loop to loop through every 
            // record in the file
            int i = 0;
            while (i < numRecords) {
                // sets the pointer to each sebsequent record in the file
                readF.seek(i * RECORD_LENGTH);
                if (id == readF.readInt()) {
                    // if it finds the correct id it sets the pointer to
                    // the start of that record and writes the information over
                    // the existing information
                    readF.seek(i * RECORD_LENGTH);
                    writeWine(readF, wine);
                    // updates observable list
                    pnlViewController.getTableView().getItems().set(id, wine);
                    // exit the loop
                    break;
                }
                i++;
            }
            readF.close();
            // handles exceptions
        } catch (IOException e) {
            showAlert("error","File not found");
        } catch (NumberFormatException e) {
            showAlert("error", "Please enter a valid number!");
        } catch (IllegalArgumentException e) {
            showAlert("error", e.getMessage());
        }
        
        //END of Part 7
    }
    
    /**
     * This method will delete the last record in the file
     * 
     */

    @FXML
    private void deleteRecord(ActionEvent event) {
        
        btnDelete.setDisable(true);
        btnUpdate.setDisable(true);
        int id = Integer.parseInt(pnlWineController.getTxtWineID().getText());
        Wine w = readTextFields();
        w.setWineID(id);
        File f = new File("src/res/wines.dat");
        
        /* TODO Part 8 - Delete the last record
        *  1. Create a RandomAccessFileObject in read and write mode
        *  2. Get the wine object from the ObservableList using the id as a
        *  position for that object in the list
        *  3. Set the length of the record to the length of existing one minus
        *  one record size. This will leave the data after tha point out, 
        *  therefore deleting the last record.\
        *  4. Remove the wine from the ObservableList
        *  5. Set the observable list items on to the TableView.
        *  Note: The requiremet for this part is to delete the last record. 
        *  Deleting a particular record that is selectd in the TableView requires
        *  a much more complex algorithm. If you can do it, you'll get double
        *  the points for this part.
        */ 
        try {
//            // create the random access file
//            RandomAccessFile readF = new RandomAccessFile(f, "rw");
//            
//            // sets the length of the file to the legth of all records up until
//            // the selected record, effectively deleting the selectef record and
//            // all records follwing it
//            readF.setLength(id * RECORD_LENGTH);
//            
//            // sets the point to the end of the (now shortened) file
//            readF.seek(readF.length());
//            // loops through every record in the observable list
//            for (Wine wine : pnlViewController.getTableView().getItems()) {
//                // if a record's id is greater than the selected id, the records
//                // id is reduced by 1 and the record is written to the file
//                if (wine.getWineID() > id) {
//                    wine.setWineID(wine.getWineID() - 1);
//                    writeWine(readF, wine);
//                }
//            }
//            // updates the observable list
//            pnlViewController.getTableView().getItems().remove(id);
            
RandomAccessFile raf = new RandomAccessFile(f, "rw");

        int wineID = pnlViewController.getTableView().getSelectionModel().getSelectedItem().getWineID();
        long recordToDelete = (wineID * RECORD_LENGTH);
        raf.setLength(recordToDelete);
        raf.seek(raf.length());
        System.out.println(wineID);
        for(int i = 0; i < pnlViewController.getObservableList().size(); i++) {
            Wine wine = pnlViewController.getObservableList().get(i);
            if(wine.getWineID() > wineID) {
                wine.setWineID(i - 1);
                writeWine(raf, wine);
            }
        }
        raf.seek(raf.length());
        pnlViewController.getObservableList().remove(id);
        pnlViewController.getTableView().setItems(pnlViewController.getObservableList());
        } catch (Exception e) {
        }
        
        
        //END of Part 8
    }
    
    @FXML
    private void exit(ActionEvent event) {
        /* TODO Part: 9 - Exit the application
        *  Use the showAlert() method to confirm before closing the application 
        */
        // creates the ButtonType which is the result of the button clicked by
        // the user
        ButtonType in = showAlert("confirmation", 
                "Are you sure you want to exit");
        // exits the program if the user clicks yes
        if (in == ButtonType.YES) {
            System.exit(0);
        }
        
        //END of Part 9
    }
    
    @FXML
    private void aboutHandler(ActionEvent event) throws IOException {
        /* TODO Part: 10 - Show the readme file
        *  Write the code that will open readme.txt file as an external file
        *  using your default text editor such as notpad or vi.
        */
        // creates the file object with the readme.txt file's path
        File f = new File("src/res/readme.txt");
        // opens it for the user
        Desktop.getDesktop().edit(f);
        
        
        //END of Part 10
    }

}
